100 REMark Akalabeth: World of Doom
110 REMark Written by Richard Garriott, 1979.
120 REMark Ported from Apple II BASIC to QL SuperBASIC
130 REMark by George Beckett, 2017
140 REMark 
150 REMark Version 0.1, Incomplete first draft
160 REMark Version 0.2, Overground navigation implemented
170 REMark Version 0.3, Dungeon implemented
180 REMark Version 0.4, Monsters implemented
1000 REMark Initialisation
1005 LET fg1=7: LET bg1=0
1010 initMenuScreen fg1, bg1
1100 REMark Initialise game
1110 GO SUB 10000: REMark Initial global variables/ arrays
1120 initCharLab c$: REMark Set up characteristics labels
1130 initStoreLab w$: REMark Set up store-item labels
1140 setupTables XX%, YY%, PER%, CD%, LD%: REMark Set up lookup tables for dungeon graphics
1150 initMonsterLab m$: REMark Set up monster labels
1300 REMark Main game loop
1310 REPeat gameLoop
1315 setupMenuScreen
1320 initPlayer luckyNumber, level, c, pt$: REMark Init player
1330 equipPlayer c$, c, w$
1335 RANDOMISE luckyNumber
1340 CLS #0: CLS #1
1350 AT 12,0: PRINT "WELCOME TO AKALABETH, WORLD OF DOOM!"
1360 initMap te%, tx, ty: REMark Initialise overland map
1365 setupGameScreen
1370 REPeat turnLoop
1380 printOvergroundLocal tx, ty, gx, gx1, gx2, gx3, gx4, gy, gy1, gy2, gy3, gy4, ox, oy, te%
1390 displayStats c, pw, tx, ty
1400 PRINT #0,"COMMAND? ";
1410 keyPress = CODE(INKEY$(-1))
1420 SELect ON keyPress
1430 ON keyPress = 208
1440 PRINT #0, "NORTH"
1450 IF te%(tx, ty+1)=1 THEN PRINT #0, "YOU CAN'T PASS THE MOUNTAINS" : ELSE ty=ty+1: LET pw(0)=pw(0)-1
1460 ON keyPress = 216
1470 PRINT #0, "SOUTH"
1480 IF te%(tx, ty-1)=1 THEN PRINT #0, "YOU CAN'T PASS THE MOUNTAINS": ELSE ty=ty-1: LET pw(0)=pw(0)-1
1490 ON keyPress=192
1500 PRINT #0, "WEST"
1510 IF te%(tx-1, ty)=1 THEN PRINT #0, "YOU CAN'T PASS THE MOUNTAINS": ELSE tx=tx-1: LET pw(0)=pw(0)-1
1520 ON keyPress=200
1530 PRINT #0, "EAST"
1540 IF te%(tx+1, ty)=1 THEN PRINT #0, "YOU CAN'T PASS THE MOUNTAINS": ELSE tx=tx+1: LET pw(0)=pw(0)-1
1550 ON keyPress=CODE("X")
1560 LET zz=te%(tx,ty)
1570 SELect ON zz
1580 ON zz=3
1590 equipPlayer c$, c, w$
1600 setupGameScreen
1610 ON zz=4
1615 LET dungeonLevel=1
1620 exploreDungeon tx, ty, dungeonLevel, luckyNumber, pt$
1625 ON zz=5
1627 visitCastle haveVisited
1628 setupGameScreen
1630 ON zz=REMAINDER 
1640 PRINT #0, "HUH?"
1650 END SELect 
1660 ON keyPress=CODE("M")
1665 PRINT #0, "MAP"
1670 printMap te%, tx, ty
1680 ON keyPress = REMAINDER 
1690 PRINT #0, "HUH?"
1695 END SELect 
1700 IF pw(0)<0 THEN LET c(0)=0: PRINT #0, "YOU HAVE STARVED!!!!!"
1710 IF c(0) <= 0 THEN endGame: EXIT turnLoop
1740 END SELect 
1750 END REPeat turnLoop
1970 REMark EXIT gameLoop
1980 END REPeat gameLoop
1990 STOP
9000 REMark Initialise player
9010 DEFine PROCedure initPlayer(luckyNumber, level, c, pt$)
9020 LOCal n, i$
9030 AT #1, 5, 0
9040 INPUT #1, 'TYPE THY LUCKY NUMBER.....'; luckyNumber
9050 RANDOMISE luckyNumber
9060 AT #1, 7,0
9070 INPUT #1, 'LEVEL OF PLAY (1-10)......'; level
9080 CLS #1
9090 AT 8,0
9100 FOR n=0 TO 5
9110 LET c(n)=INT(SQRT(RND)*21+4)
9115 PRINT c$(n);
9120 printNum c(n), 3, 1
9130 PRINT \
9140 END FOR n
9150 AT 15,0
9160 PRINT "SHALT THOU PLAY WITH THESE QUANTITIES? ";
9170 LET i$=INKEY$(-1)
9175 IF i$<>"Y" THEN GO TO 9090
9180 PRINT i$
9190 AT 18,0
9200 PRINT "AND SHALT THOU BE A FIGHTER OR A MAGE? ";
9210 LET i$=INKEY$(-1)
9220 IF i$<>"F" AND i$<>"M" THEN GO TO 9210
9230 LET pt$=i$: PRINT i$
9260 END DEFine initPlayer
10000 REMark Initial global variables / arrays
10010 DIM w$(6,14): REMark Store-item labels
10020 DIM W(5,3): REMark Store-item characteristics
10030 DIM c$(5,15): REMark Characteristic labels
10040 DIM c(5): REMark Player characteristics
10050 DIM pw(5): REMark Player inventory
10060 DIM XX%(10), YY%(10): REMark Graphics lookup tables
10070 DIM PER%(10,3): REMark Perspective lookup tables
10075 DIM CD%(10,3): REMark Centre door perspective
10076 DIM LD%(10,5): REMark Left/ right door perspective
10077 DIM FT%(10,5): REMark Trapdoor/ hole in floor
10078 DIM LAD%(10,3): REMark Ladder
10080 DIM te%(20,20): REMark Overland map
10090 DIM M$(10,15): REMark Monster labels
10100 DIM ML%(10,1), MZ%(10,1): REMark Monster attributes
10110 pt$="F": REMark Player type
10120 LET gx=33: LET gx1=gx/5: LET gx2=2*gx/5: LET gx3=3*gx/5+1: LET gx4=4*gx/5+1
10130 LET gy=33: LET gy1=gy/5: LET gy2=2*gy/5: LET gy3=3*gy/5+1: LET gy4=4*gy/5+1
10140 LET ox=35: LET oy=0
10150 LET haveVisited=0 : REMark Flag whether or have visited Lord Britain's castle
10160 LET name$="THE PEASANT": REMark Player's name
10170 LET task=0
10180 LET dungeonLevel=0: REMark Dungeon level
10190 DIM dng%(10,10,1): REMark Dungeon map
10290 RETurn 
10300 REMark Initialise characteristics labels
10310 DEFine PROCedure initCharLab(c$)
10320 LOCal n
10330 RESTORE 10390
10340 FOR n=0 TO 5
10350 READ c$(n)
10360 END FOR n
10370 END DEFine initCharLab
10390 DATA "HIT POINTS.....","STRENGTH.......","DEXTERITY......","STAMINA........","WISDOM.........","GOLD..........."
10400 REMark Initialise store-item labels
10410 DEFine PROCedure initStoreLab(w$)
10420 LOCal n
10430 RESTORE 10480
10440 FOR n=0 TO 5
10450 READ w$(n),W(n,0),W(n,1),W(n,2),W(n,3): REMark Name, Price, Units, Damage, Key (ASCII)
10460 END FOR n
10470 END DEFine initStoreLab
10480 DATA "FOOD",1,10,0,70,"RAPIER",8,1,10,82,"AXE",5,1,5,65
10490 DATA "SHIELD",6,1,1,83,"BOW AND ARROWS",3,1,4,66,"MAGIC AMULET",15,1,-1,77
10500 REMark Set up lookup tables for dungeon graphics
10510 DEFine PROCedure setupTables(XX%, YY%, PER%, CD%, LD%)
10520 LOCal atn1, n, W
10530 LET atn1=ATAN(1)
10540 XX%(0) = 80: YY%(0) = 50
10550 FOR n=2 TO 20 STEP 2
10560 XX%(n/2) = INT(ATAN(1/n) / atn1 * 80 +.5)
10570 LET YY%(n/2) = INT(XX%(n/2)/1.6)
10580 LET PER%(n/2,0) = 80-XX%(n/2)
10590 LET PER%(n/2,1) = 80+XX%(n/2)
10600 LET PER%(n/2,2) = 50 + YY%(n/2)
10610 LET PER%(n/2,3) = 50 - YY%(n/2)
10620 END FOR n
10630 LET PER%(0,0)=0: LET PER%(0,1)=160: LET PER%(0,2)=100: LET PER%(0,3)=0
10640 FOR n = 1 TO 10
10650 LET CD%(n,0) = 80 - XX%(n)/3 : LET CD%(n,1) = 80 + XX%(n)/3: LET CD%(n,2) = 50 + YY%(n) * .7 : LET CD%(n,3) = 50 - YY%(n)
10655 END FOR n
10660 FOR n=0 TO 9
10670 LET LD%(n,0) = (PER%(n,0) * 2 + PER%(n + 1,0)) / 3: LET LD%(n,1) = (PER%(n,0) + 2 * PER%(n + 1,0)) / 3: LET W = LD%(n,0) - PER%(n,0)
10671 LET LD%(n,2) = PER%(n,2) - W / 1.6 : LD%(n,3) = PER%(n,2) - 2 * W / 1.6: LET LD%(n,4) = (PER%(n,3) * 2 + PER%(n + 1,3)) / 3: LET LD%(n,5) = (PER%(n,3) + 2 * PER%(n + 1,3)) / 3
10672 LET LD%(n,2) = LD%(n,4) - (LD%(n,4) - LD%(n,2))*.8: LET LD%(n,3) = LD%(n,5)-(LD%(n,5) - LD%(n,3)) *.8: IF LD%(n,3) = LD%(n,4) THEN LET LD%(n,3) = LD%(n,3) + 1: END IF 
10673 END FOR n
10680 REMark Pre-compute coordinates of trapdoor/ hole in floor
10681 FOR n=0 TO 9
10682 LET FT%(n,0) = 80 - XX%(n)/3 : LET FT%(n,1) = 80 + XX%(n)/3 : LET FT%(n,2) = 80 - XX%(n+1)/3 : LET FT%(n,3) = 80 + XX%(n+1)/3
10683 LET FT%(n,4) = 50 - (YY%(n) * 2 + YY%(n + 1)) / 3: LET FT%(n,5) = 50 - (YY%(n) + 2 * YY%(n + 1)) / 3
10684 END FOR n
10685 REMark Pre-compute coordinates of ladder
10686 FOR n=0 TO 9
10687 LET LAD%(n,0) = (FT%(n,0)*2 + FT%(n,1)) / 3: LET LAD%(n,1) = (FT%(n,0) + 2*FT%(n,1))/3 : LET LAD%(n,3) = FT%(n,4) : LET LAD%(n,2) = 100 - LAD%(n,3)
10688 END FOR n
10690 END DEFine setupTables
10700 REMark Initialise overland map
10710 DEFine PROCedure initMap(te%, tx, ty)
10715 REMark Key: 0-blank; 1-mountain; 2-refuge; 3-town; 4-dungeon; 5-castle
10720 LOCal m, n, obj
10730 PRINT #0; " (PLEASE WAIT)";
10735 REMark Overland border is all mountains
10740 FOR m=0 TO 20
10750 te%(m,0)=1: te%(0,m)=1: te%(20,m)=1: te%(m,20)=1
10760 END FOR m
10770 FOR m=1 TO 19
10780 FOR n=1 TO 19
10790 obj = INT(RND^5*4.5)
10800 IF obj=3 AND RND > .5 THEN te%(m,n)=0: ELSE te%(m,n)=obj: END IF 
10810 END FOR n
10820 PRINT #0; ".";
10830 END FOR m
10840 REMark MAKE SURE AT LEAST ONE DUNGEON
10850 te%(INT(RND(1 TO 19)), INT(RND(1 TO 19)))=3
10860 REMark PLACE LORD BRITAIN'S CASTLE
10870 te%(INT(RND(1 TO 19)), INT(RND(1 TO 19)))=5
10875 REMark Set start position for player
10876 LET tx=INT(RND(1 TO 19))
10877 LET ty=INT(RND(1 TO 19))
10880 CLS #0
10890 END DEFine initMap
10900 REMark Initialise monster labels
10910 DEFine PROCedure initMonsterLab(m$)
10920 LOCal n
10930 RESTORE 10990
10940 FOR n=1 TO 10
10950 READ m$(n)
10960 END FOR n
10970 END DEFine initMonsterLab
10990 DATA "SKELETON","THIEF","GIANT RAT","ORC","VIPER","CARRION CRAWLER","GREMLIN","MIMIC","DAEMON","BALROG"
11000 REMark equip player from shop
11010 DEFine PROCedure equipPlayer(c$, c, w$)
11020 LOCal n, z, price
11030 setupMenuScreen
11040 AT 1,0
11050 PRINT "     STAT'S           WEAPONS"
11060 AT 9,15
11070 PRINT "Q-QUIT"
11080 AT 11,2
11090 PRINT "PRICE     DAMAGE    ITEM"
11100 FOR n=0 TO 5
11110 AT 13+n,2
11120 PRINT W(n,0);
11130 IF W(n,1) > 1 THEN PRINT " FOR " & W(n,1)
11140 AT 13+n,12
11150 IF W(n,2) > 1 THEN PRINT "1-" & W(n,2): ELSE IF W(n,2)=0 THEN PRINT "N/A": ELSE IF W(n,2) = -1 THEN PRINT "?????": ELSE PRINT W(n,2): END IF 
11160 AT 13+n,22
11170 PRINT w$(n)
11180 END FOR n
11190 AT 0,0
11200 PRINT #0, "WELCOME TO THE ADVENTURE SHOP"
11210 REPeat buyItem
11220 AT 3,0
11230 FOR n=0 TO 5
11240 PRINT c$(n);
11250 printNum c(n), 3, 1
11260 printNum pw(n), 3, 1
11270 PRINT "-"; w$(n)
11280 END FOR n
11290 PRINT #0; "WHICH ITEM SHALT THOU BUY ";
11300 LET i$=INKEY$(-1)
11310 IF i$="Q" THEN PRINT #0, \ "BYE": PAUSE 200: EXIT buyItem: END IF 
11320 LET z=-1
11330 FOR n=0 TO 5
11340 IF i$=CHR$(W(n,3)) THEN PRINT #0, w$(n): LET z=n: LET p=W(n,0):END IF 
11350 END FOR n
11360 IF z=-1 THEN PRINT #0, "I'M SORRY WE DON'T HAVE THAT.": NEXT buyItem: END IF 
11370 IF (z=1 OR z=4) AND pt$="M" THEN PRINT #0, "I'M SORRY MAGES CAN'T USE THAT": NEXT buyItem: END IF 
11380 IF c(5) < p THEN PRINT #0, "M'LORD THOU CAN NOT AFFORD THAT ITEM.": NEXT buyItem: END IF 
11390 pw(z)=pw(z)+1+(9*NOT(z))
11400 c(5)=c(5)-p
11410 END REPeat buyItem
11420 RETurn 
11430 END DEFine equipPlayer
11500 REMark Print overground local area
11510 DEFine PROCedure printOvergroundLocal(tx, ty, gx, gx1, gx2, gx3, gx4, gy, gy1, gy2, gy3, gy4, ox, oy, te%)
11520 LOCal zz, cx, cy
11530 CLS #1
11540 LINE ox+3*gx/2-3,oy+3*gy/2 TO ox+3*gx/2+3,oy+3*gy/2
11550 LINE ox+3*gx/2,oy+3*gy/2-2 TO ox+3*gx/2,oy+3*gy/2+2
11560 FOR dx=-1 TO 1
11570 FOR dy=-1 TO 1
11580 zz=te%(tx+dx, ty+dy)
11590 cx=ox+(dx+1)*gx
11600 cy=oy+(dy+1)*gy
11610 SELect ON zz
11620 ON zz=1: REMark Mountain
11630 LINE cx+gx1,cy TO cx+gx1,cy+gy1 TO cx+gx2,cy+gy2 TO cx+gx4,cy+gy2 TO cx+gx4,cy: LINE cx,cy+gy4 TO cx+gx1,cy+gy4: LINE cx+gx,cy+gy4 TO cx+gx4, cy+gy4: LINE cx,cy+gy1 TO cx+gx1,cy+gy1: LINE cx+gx4,cy+gy1 TO cx+gx,cy+gy1: LINE cx+gx1,cy+gy TO cx+gx1,cy+gy3 TO cx+gx2,cy+gy3 TO cx+gx2,cy+gy2 TO cx+gx3,cy+gy2 TO cx+gx3,cy+gy4 TO cx+gx4,cy+gy4 TO cx+gx4, cy+gy
11640 ON zz=2: REMark Refuge
11650 LINE cx+gx2, cy+gy2 TO cx+gx3, cy+gy2 TO cx+gx3, cy+gy3 TO cx+gx2, cy+gy3 TO cx+gx2, cy+gy2
11660 ON zz=3: REMark Town
11670 LINE cx+gx1,cy+gy1 TO cx+gx2,cy+gy1 TO cx+gx2,cy+gy4 TO cx+gx1,cy+gy4 TO cx+gx1,cy+gy3 TO cx+gx4,cy+gy3 TO cx+gx4,cy+gy4 TO cx+gx3,cy+gy4 TO cx+gx3,cy+gy1 TO cx+gx4,cy+gy1 TO cx+gx4,cy+gy2 TO cx+gx1,cy+gy2 TO cx+gx1,cy+gy1
11680 ON zz=4: REMark Dungeon
11690 LINE cx+gx2,cy+gy2 TO cx+gx3+1,cy+gy3+1: LINE cx+gx2,cy+gy3+1 TO cx+gx3+1, cy+gy2
11700 ON zz=5: REMark Castle
11710 LINE cx,cy TO cx+gx,cy TO cx+gx,cy+gy TO cx,cy+gy TO cx,cy: LINE cx+gx1,cy+gy1 TO cx+gx4,cy+gy1 TO cx+gx4,cy+gy4 TO cx+gx1,cy+gy4 TO cx+gx1,cy+gy1: LINE cx+gx1,cy+gy1 TO cx+gx4,cy+gy4 : LINE cx+gx4,cy+gy1 TO cx+gx1,cy+gy4
11720 END SELect 
11730 END FOR dy
11740 END FOR dx
11750 END DEFine printOvergroundLocal
11800 REMark Display stats when overground
11810 DEFine PROCedure displayStats(chars, invent, x, y)
11820 AT #3, 0,0: PRINT #3, "FOOD=";: printNum invent(0), 3, 3
11830 AT #3, 1,0: PRINT #3, "H.P.=";: printNum chars(0),3,3
11840 AT #3, 2,0: PRINT #3, "GOLD=";: printNum chars(5),3,3
11850 AT 0,0: PRINT "LOC=";: printNum x, 2, 1: PRINT " ";: printNum y, 2, 1
11860 END DEFine displayStats
11900 REMark In-game screen configuration
11910 DEFine PROCedure setupGameScreen
11920 WINDOW #0, 340, 30, 32, 226
11930 CLS #0
11940 WINDOW #1, 448, 210, 32, 16
11950 CLS #1
11960 WINDOW #3, 108, 30, 372, 226
11970 CLS #3
11990 END DEFine setupGameScreen
12000 REMark Init menu screen
12010 DEFine PROCedure initMenuScreen(fg, bg)
12020 MODE 8
12030 WINDOW #0, 448,30,32,226
12040 PAPER #0, bg: INK #0, fg: BORDER #0: CLS #0
12050 OPEN #1, CON_448X210A32X16_128
12060 PAPER #1, bg: INK #1, fg: BORDER #1: CLS #1
12070 OPEN #3, CON: PAPER #3, bg: INK #3, fg: CLS #3
12090 END DEFine initMenuScreen
12100 REMark Menu screen configuration
12110 DEFine PROCedure setupMenuScreen
12120 WINDOW #0, 448, 30, 32, 226
12130 CLS #0
12140 WINDOW #1, 448, 210, 32, 16
12150 CLS #1
12190 END DEFine setupMenuScreen
12200 REMark Visit Lord Britain's Castle
12210 DEFine PROCedure visitCastle(haveVisited)
12215 LOCal i$, n
12220 setupMenuScreen
12230 IF haveVisited THEN 
12240 IF task>0 THEN 
12250 PRINT \\ name$ & " WHY HAST THOU RETURNED?"
12260 PRINT "THOUGH MUST KILL A(N) "; m$(task)
12270 PRINT "GO NOW AND COMPLETE THY TASK!" \ \ "       PRESS -SPACE- TO CONT."
12280 PAUSE -1
12285 END IF 
12290 ELSE 
12300 LET haveVisited=1
12310 PRINT "WELCOME PEASANT INTO THE HALLS OF THE" \ "MIGHTY LORD BRITISH. HEREIN THOU MAY" \ "CHOOSE TO DARE BATTLE WITH THE EVIL" \ "CREATURES OF THE DEPTHS, FOR GREAT" \ "REWARD!"
12320 INPUT \ "WHAT IS THY NAME PEASANT "; name$
12330 PRINT "DOEST THOU WISH FOR GRAND ADVENTURE ? "
12340 LET i$=INKEY$(-1)
12350 IF i$<>"Y" THEN PRINT \ "THEN LEAVE AND BEGONE!": LET name$ = "":  LET haveVisited=0: PRINT #1, "       PRESS -SPACE- TO CONT.": PAUSE -1: RETurn : END IF 
12360 PRINT "GOOD! THOU SHALT TRY TO BECOME A" \ "KNIGHT!!!" \\ "THY FIRST TASK IS TO GO INTO THE" \ "DUNGEONS AND TO RETURN ONLY AFTER" \ "KILLING A(N) ";
12370 LET task=INT(c(4)/3): REMark Wisdom
12380 PRINT m$(task)
12390 PRINT \ "     GO NOW UPON THIS QUEST, AND MAY" \"LADY LUCK BE FAIR UNTO YOU....." \ ".....ALSO I, BRITISH, HAVE INCREASED" \ "EACH OF THY ATTRIBUTES BY ONE!"
12400 FOR n=0 TO 5: LET c(n) = c(n) + 1 : END FOR n
12410 PRINT #0, "       PRESS -SPACE- TO CONT."
12420 PAUSE -1
12480 END IF 
12490 END DEFine visitCastle
12600 REMark End Game
12610 DEFine PROCedure endGame
12620 LOCal temp$
12630 WINDOW #0, 448,40,32,216
12640 CLS #0
12650 LET temp$=name$ & " AND HIS COMPUTER"
12660 PRINT #0, "WE MOURN THE PASSING OF"
12670 PRINT #0, temp$
12690 PRINT #0, "TO INVOKE A MIRACLE OF RESSURECTION" \ "           <HIT ESC KEY>"
12700 LET temp$=INKEY$(-1): IF temp$<>" " THEN GO TO 12700: END IF 
12710 END DEFine endGame
12799 REMark ===============
12800 REMark Explore dungeon
12801 REMark ===============
12810 DEFine PROCedure exploreDungeon(tx, ty, dungeonLevel, luckyNumber, pt$)
12815 LOCal PX, PY, dx, dy, keyPress, hasMoved
12820 PRINT #0, "GO DUNGEON"
12830 PRINT #0, "PLEASE WAIT"
12840 initDungeon tx, ty, dungeonLevel, luckyNumber, level
12845 setupGameScreen
12850 LET PX=1: LET PY=1: REMark Posn in dungeon
12860 LET dx=1: LET dy=0: REMark Direction facing in dungeon
12870 REPeat dungeonLoop
12880 LET hasMoved=0: REMark Flag to trigger test for traps, chest, etc.
12890 LET pw(0)=pw(0)-.1: REMark Consume food
12895 IF pw(0)<0 THEN 
12896   LET c(0)=0
12897   PRINT #0, "YOU HAVE STARVED!!!!!"
12898 END IF 
12900 checkForAttack dng%, dungeonLevel, PX, PY, dx, dy
12905 displayStats c, pw, PX, PY
12910 displayDungeonView dng%, PX, PY, dx, dy, PER%, CD%, LD%
12920 PRINT #0,"COMMAND? ";
12930 keyPress = CODE(INKEY$(-1))
12940 SELect ON keyPress
12950 ON keyPress = 208
12960   PRINT #0, "FORWARD"
12970   IF dng%(PX+dx, PY+dy,0) <> 1 AND dng%(PX+dx, PY+dy,1)=0 THEN LET PX=PX+dx :LET PY=PY+dy: LET hasMoved=1: END IF 
12980 ON keyPress = 216
12990   PRINT #0, "TURN AROUND"
13000   LET dx=-dx: LET dy=-dy
13010 ON keyPress=192
13020   PRINT #0, "TURN LEFT"
13030   IF dx <>0 THEN LET dy=dx: LET dx=0: ELSE LET dx=-dy: LET dy=0: END IF 
13040 ON keyPress=200
13050   PRINT #0, "TURN RIGHT"
13060   IF dx <> 0 THEN LET dy=-dx: LET dx=0: ELSE LET dx=dy: LET dy=0: END IF 
13070 ON keyPress=CODE("X")
13079   LET locum=dng%(PX,PY,0)
13080   SELect ON locum
13081   ON locum=7, 9
13082     LET dungeonLevel=dungeonLevel+1: PRINT #0, "GO DOWN TO LEVEL "; dungeonLevel: initDungeon tx, ty, dungeonLevel, luckyNumber, level
13083   ON locum=8
13084     LET dungeonLevel=dungeonLevel-1: IF dungeonLevel=0 THEN PRINT #0, "LEAVE DUNGEON": ELSE PRINT #0, "GO UP TO LEVEL "; dungeonLevel: initDungeon tx, ty, dungeonLevel, luckyNumber, level
13085   ON locum=REMAINDER 
13086     PRINT #0, "HUH?"
13087   END SELect 
13090 ON keyPress=CODE("A")
13095   LET oldDungeonLevel=dungeonLevel: REMark Using amulet can change level
13100   attackMonster pt$, dungeonLevel, PX, PY, dx, dy
13103   IF oldDungeonLevel <> dungeonLevel THEN 
13105     initDungeon tx, ty, dungeonLevel, luckyNumber, level
13107   END IF 
13110 ON keyPress=CODE("M")
13120   printDungeonMap dng%, PX, PY
13130 END SELect 
13140 IF dungeonLevel=0 THEN 
13141   RETurn 
13142 END IF 
13150 REMark Check for chest
13160 IF hasMoved=1 AND dng%(PX, PY,0)=5 THEN 
13170   LET dng%(PX,PY,0)=0: PRINT #0, "GOLD!!!!!"
13175   LET tmp=RND(4)*dungeonLevel+3: LET c(5)=c(5)+tmp
13176   PRINT #0, tmp; "-PIECES OF EIGHT"
13177   LET tmp=RND(5): LET pw(tmp)=pw(tmp)+1
13178   PRINT #0, "AND A "; w$(tmp): PAUSE 50
13179 END IF 
13180 REMark Check for trap
13190 IF hasMoved=1 AND dng%(PX, PY,0)=2 THEN 
13200   PRINT #0, "AAARRRGGGHHH!!! A TRAP!"
13210   LET c(0)=c(0)-RND(3)*dungeonLevel+3
13220   LET dungeonLevel=dungeonLevel+1
13230   PRINT #0, "FALLING TO LEVEL "; dungeonLevel
13240   initDungeon tx, ty, dungeonLevel, luckyNumber, level
13250 END IF 
13280 END REPeat dungeonLoop
13290 END DEFine exploreDungeon
13299 REMark ========================
13300 REMark Initialise dungeon level
13301 REMark ========================
13310 DEFine PROCedure initDungeon(tx, ty, dungeonLevel, luckyNumber, level)
13320 LOCal m, n
13322 RANDOMISE (luckyNumber+10*tx+100*ty+1000*dungeonLevel)
13325 REMark Clear any previous dungeon-level data
13330 FOR m=1 TO 9
13331 FOR n=1 TO 9
13332 LET dng%(m,n,0)=0: LET dng%(m,n,1)=0
13333 END FOR n
13334 END FOR m
13338 REMark Ensure boundary wall is complete
13340 FOR n=0 TO 10
13342 LET dng%(0,n,0)=1: LET dng%(10,n,0)=1: LET dng%(n,0,0)=1: LET dng%(n,10,0)=1
13345 END FOR n
13348 REMark Fill in interior walls
13350 FOR m=2 TO 8 STEP 2
13352 FOR n=1 TO 9
13354 LET dng%(m,n,0)=1: LET dng%(n,m,0)=1
13356 END FOR n
13358 END FOR m
13360 FOR m=2 TO 8 STEP 2
13370 FOR n=1 TO 9 STEP 2
13380 IF RND > .6 THEN LET dng%(m,n,0)=3:END IF : REMark Hidden door
13390 IF RND > .6 THEN LET dng%(n,m,0)=3:END IF 
13400 IF RND > .6 THEN LET dng%(m,n,0)=4:END IF : REMark Door
13410 IF RND > .6 THEN LET dng%(n,m,0)=4:END IF 
13420 IF RND > .94 THEN LET dng%(m,n,0)=5:END IF 
13430 IF RND > .94 THEN LET dng%(n,m,0)=5:END IF 
13440 IF RND > .95 THEN LET dng%(m,n,0)=2:END IF : REMark Trap
13450 IF RND > .95 THEN LET dng%(n,m,0)=2:END IF 
13460 IF RND > .97 THEN LET dng%(m,n,0)=9:END IF : REMark Trapdoor
13470 IF RND > .97 THEN LET dng%(n,m,0)=9:END IF 
13480 END FOR n
13490 END FOR m
13500 LET dng%(2,1,0)=0: REMark Clear start position
13510 IF dungeonLevel MOD 2 THEN LET dng%(7,3,0)=8: LET dng%(3,7,0)=7: ELSE LET dng%(7,3,0)=7: LET dng%(3,7,0)=8: END IF 
13520 IF dungeonLevel=1 THEN LET dng%(7,3,0)=0: LET dng%(1,1,0)=8: END IF 
13530 REMark addMonsters
13540 FOR n=1 TO 10
13550   LET MZ%(n,0) = 0: REMark Remove any previous monster
13560   IF (n < dungeonLevel+2) AND RND < 0.6 THEN 
13570     REPeat placeMonster
13572       LET ML%(n,0)=RND(9)+1: LET ML%(n,1)=RND(9)+1
13573       IF (dng%(ML%(n,0),ML%(n,1),0)=0) AND NOT(tx=ML%(n,0) AND ty=ML%(n,1)) THEN EXIT placeMonster
13575     END REPeat placeMonster
13580     LET dng%(ML%(n,0),ML%(n,1),1)=n+1: LET MZ%(n,0)=1
13590     LET MZ%(n,1)=2*n+2*dungeonLevel*level
13600   END IF 
13610 END FOR n
13620 END DEFine initDungeon
13800 REMark Display view of dungeon
13810 DEFine PROCedure displayDungeonView(dng%, PX, PY, dx, dy, PER%, CD%, LD%)
13820 LOCal distance, centre, left, right, monsters, L1, R1, T1, B1, L2, R2, T2, B2
13825 CLS #1
13830 LET distance=0: REMark Render dungeon from near to far
13840 REPeat drawDungeon
13850 LET centre=dng%(PX+dx*distance, PY+dy*distance,0)
13852 LET left=  dng%(PX+dx*distance-dy, PY+dy*distance+dx,0)
13854 LET right= dng%(PX+dx*distance+dy, PY+dy*distance-dx,0)
13855 AT distance+1,0
13856 PRINT distance; " "; left; " "; dng%(PX+dx*distance, PY+dy*distance,1); " "; right
13860 REMark Extract and remove monsters from view
13870 REMark LET monsters=INT(centre/10)
13880 REMark LET centre = centre MOD 10
13890 LET left = left MOD 10
13900 LET right = right MOD 10
13901 LET L1 = PER%(distance,0): LET R1 = PER%(distance,1): LET T1 = PER%(distance,2): LET B1 = PER%(distance,3):
13902 LET L2 = PER%(distance + 1,0): LET R2 = PER%(distance + 1,1): LET T2 = PER%(distance + 1,2): LET B2 = PER%(distance + 1,3)
13910 REMark Check if we are done
13920 IF distance>0 AND (centre=1 OR centre=3) THEN LINE L1,T1 TO R1,T1 TO R1,B1 TO L1,B1 TO L1,T1: EXIT drawDungeon: END IF 
13930 IF distance>0 AND centre=4 THEN LINE L1,T1 TO R1,T1 TO R1,B1 TO L1,B1 TO L1,T1: LINE CD%(distance,0),CD%(distance,3) TO CD%(distance,0),CD%(distance,2) TO CD%(distance,1),CD%(distance,2) TO CD%(distance,1),CD%(distance,3): EXIT drawDungeon: END IF 
13950 REMark Check for wall and door on left
13960 IF (left=1 OR left=3 OR left=4) THEN LINE L1,T1 TO L2,T2: LINE L1,B1 TO L2,B2: END IF 
13970 IF left=4 THEN IF distance>0 THEN LINE LD%(distance,0),LD%(distance,4) TO LD%(distance,0),LD%(distance,2) TO LD%(distance,1),LD%(distance,3) TO LD%(distance,1),LD%(distance,5): ELSE LINE 0,LD%(distance,2)+3 TO LD%(distance,1),LD%(distance,3) TO LD%(distance,1),LD%(distance,5): END IF : END IF 
13980 REMark Check for wall and door on right
13990 IF (right=1 OR right=3 OR right=4) THEN LINE R1,T1 TO R2,T2: LINE R1,B1 TO R2,B2: END IF 
14000 IF right=4 THEN IF distance>0 THEN LINE 160-LD%(distance,0),LD%(distance,4) TO 160-LD%(distance,0),LD%(distance,2) TO 160-LD%(distance,1),LD%(distance,3) TO 160-LD%(distance,1),LD%(distance,5): ELSE LINE 160,LD%(distance,2)+3 TO 160-LD%(distance,1),LD%(distance,3) TO 160-LD%(distance,1),LD%(distance,5): END IF : END IF 
14010 REMark Check if facing a visible wall on left
14020 IF NOT(left=1 OR left=3 OR left=4) THEN LINE L1,T2 TO L2,T2 TO L2,B2 TO L1,B2: IF distance>0 THEN LINE L1,T1 TO L1,B1: END IF : END IF 
14030 REMark Check if facing a visible wall on right
14040 IF NOT(right=1 OR right=3 OR right=4) THEN LINE R1,T2 TO R2,T2 TO R2,B2 TO R1,B2: IF distance>0 THEN LINE R1,T1 TO R1,B1: END IF : END IF 
14050 REMark Check if trapdoor/ hole is visible
14060 IF (centre=7 OR centre=9) THEN LINE FT%(distance,0),FT%(distance,4) TO FT%(distance,2),FT%(distance,5) TO FT%(distance,3),FT%(distance,5) TO FT%(distance,1),FT%(distance,4) TO FT%(distance,0),FT%(distance,4): END IF 
14070 IF centre=8 THEN LINE FT%(distance,0),100 - FT%(distance,4) TO FT%(distance,2),100 - FT%(distance,5) TO FT%(distance,3),100 - FT%(distance,5) TO FT%(distance,1),100 - FT%(distance,4) TO FT%(distance,0),100 - FT%(distance,4): END IF 
14080 REMark check if ladder is visible
14090 IF (centre=7 OR centre=8) THEN LET BA = LAD%(distance,3) : LET TP=LAD%(distance,2) : LET LX = LAD%(distance,0) : LET RX = LAD%(distance,1): LINE LX,BA TO LX,TP: LINE RX,TP TO RX,BA: LET Y1 = (BA*4 + TP)/5: :LET Y2 = (BA*3 + TP*2) / 5: LET Y3 = (BA * 2 + TP * 3)/5 : LET Y4 = (BA + TP * 4) / 5: LINE LX,Y1 TO RX,Y1: LINE LX,Y2 TO RX,Y2: LINE LX,Y3 TO RX,Y3: LINE LX,Y4 TO RX,Y4: END IF 
14100 REMark Check if chest is visible
14110 IF (distance>0 AND centre=5) THEN LINE 80-8/distance, PER%(distance,3) TO 80-8/distance, PER%(distance,3) + 8/distance TO 80 + 8/distance, PER%(distance,3) + 8/distance TO 80 + 8/distance, PER%(distance,3) TO 80 - 8/distance, PER%(distance,3): LINE 80-8/distance, PER%(distance,3)+8/distance TO 80-4/distance,PER%(distance,3)+12/distance TO 80+12/distance, PER%(distance,3)+12/distance TO 80 + 12/distance, PER%(distance,3) + 4/distance TO 80 + 8/distance, PER%(distance,3) : LINE 80 + 8/distance, PER%(distance,3) + 8/distance TO 80 + 12/distance,PER%(distance,3) + 12/distance: END IF 
14120 IF (distance>0 AND centre=5) THEN PAPER #0, fg1: INK #0, bg1: PRINT #0, "CHEST!": PAPER #0, bg1: INK #0, fg1: END IF 
14130 REMark Check for monsters
14135 IF distance=0 THEN LET distance=distance+1: NEXT drawDungeon
14140 LET mc=dng%(PX+dx*distance, PY+dy*distance, 1)
14145 LET B1 = 50 - YY%(distance): LET B2 = 80
14150 SELect ON mc
14160 REMark Skeleton
14170 =1,3,4
14175   PRINT #0; m$(mc)
14180   LINE B2-16/distance, B1 TO B2-10/distance, B1 TO B2-10/distance, B1+10/distance TO B2-5/distance, B1+20/distance TO B2+5/distance, B1+20/distance TO B2+10/distance, B1+10/distance TO B2+10/distance, B1 TO B2+16/distance, B1
14190   LINE B2, B1+16/distance TO B2, B1+44/distance: LINE B2-2/distance, B1+22/distance TO B2+2/distance, B1+22/distance: LINE B2-3/distance, B1+30/distance TO B2+3/distance, B1+30/distance: LINE B2-5/distance, B1+36/distance TO B2+5/distance, B1+36/distance
14200   LINE B2-23/distance, B1+39/distance TO B2-30/distance, B1+36/distance TO B2-23/distance, B1+30/distance TO B2-23/distance,B1+36/distance TO B2-8/distance, B1+26/distance
14210   LINE B2-15/distance, B1+30/distance TO B2-8/distance, B1+40/distance TO B2+8/distance, B1+40/distance TO B2+15/distance, B1+30/distance TO B2+15/distance, B1+28/distance TO B2+15/distance, B1+38/distance: LINE B2+12/distance, B1+30/distance TO B2+20/distance, B1+30/distance
14220   LINE B2,B1+50/distance TO B2-5/distance,B1+54/distance TO B2-8/distance,B1+50/distance TO B2-5/distance,B1+44/distance TO B2+5/distance, B1+44/distance TO B2+5/distance, B1+46/distance TO B2-5/distance,B1+46/distance TO B2-5/distance,B1+44/distance
14230   LINE TO B2+5/distance,B1+44/distance TO B2+8/distance, B1+50/distance TO B2+5/distance, B1+54/distance TO B2-5/distance,B1+54/distance: LINE B2-5/distance,B1+48/distance TO B2+5/distance, B1+48/distance
14240 REMark Thief
14250 =2
14255   PRINT #0; m$(mc)
14260   LINE B2,B1+39/distance TO B2,B1+6/distance TO B2+10/distance,B1 TO B2+30/distance,B1 TO B2+30/distance,B1+30/distance TO B2+10/distance,B1+43/distance TO B2,B1+38/distance
14270   LINE TO B2-10/distance,B1+43/distance TO B2-30/distance,B1+30/distance TO B2-30/distance,B1 TO B2-10/distance,B1 TO B2,B1+6/distance
14280   LINE B2-10/distance,B1+43/distance TO B2-10/distance,B1+50/distance TO B2,B1+56/distance TO B2+10/distance,B1+50/distance TO B2,B1+52/distance TO B2-10/distance,B1+50/distance TO B2,B1+40/distance TO B2+10/distance,B1+50/distance TO B2+10/distance,B1+43/distance
14300 END SELect 
14570 LET distance=distance+1
14580 END REPeat drawDungeon
14590 END DEFine displayDungeonView
14999 REMark ==================================
15000 REMark Move monsters and check for attack
15001 REMark ==================================
15010 DEFine PROCedure checkForAttack(dng%, dungeonLevel, PX, PY, dx, dy)
15020 LOCal n, range, x1, Y1, d
15030 FOR n=1 TO 10
15040 IF MZ%(n,0)=0: NEXT n: EXIT n: END IF 
15050 LET range=SQRT((PX-ML%(n,0))^2 + (PY-ML%(n,1))^2)
15060 REMark Check if monster will attack
15070 IF (range<1.3 AND MZ%(n,1)>(dungeonLevel*level)) THEN 
15080 REMark Attack
15140 END IF 
15150 REMark Move monster
15160 LET x1=sgn(PX-ML%(n,0)): LET Y1=sgn(PY-ML%(n,1))
15165 PRINT #0, n; " "; x1; " "; Y1
15170 REMark If few health points, monster will run away
15180 IF MZ%(n,1) < (dungeonLevel*level) THEN LET x1=-x1: LET Y1=-Y1: END IF 
15190 IF ( Y1<>0 AND dng%(ML%(n,0),ML%(n,1)+Y1,0)<>1 AND dng%(ML%(n,0),ML%(n,1)+Y1,0)<>2 AND dng%(ML%(n,0),ML%(n,1)+Y1,1)=0 ) THEN LET x1=0: END IF 
15210 IF ( x1<>0 AND dng%(ML%(n,0)+x1,ML%(n,1),0)<>1 AND dng%(ML%(n,0)+x1,ML%(n,1),0)<>2 AND dng%(ML%(n,0)+x1,ML%(n,1),1)=0 ) THEN LET Y1=0: END IF 
15220 IF ((x1 OR Y1) AND NOT (ML%(n,0)+x1=PX AND ML%(n,1)+Y1=PY)) THEN LET dng%(ML%(n,0),ML%(n,1),1)=0: LET ML%(n,0)=ML%(n,0)+x1: LET ML%(n,1)=ML%(n,1)+Y1: LET dng%(ML%(n,0),ML%(n,1),1)=n: END IF 
15230 REMark In original game, monster may rejuvinate at this point (Line 4083), if doesn't attack
15240 END FOR n
15990 END DEFine checkForAttack
16000 REMark ==============
16010 REMark Attack monster
16020 REMark ==============
16030 DEFine PROCedure attackMonster(pt$, dungeonLevel, PX, PY, dx, dy)
16040 LOCal throwWeapon, weapon, keyPress, n, damage, amuletFunction, badEffect
16050 REMark Choose weapon
16060 LET weapon=-1
16070 LET throwWeapon=0
16080 REPeat chooseWeapon
16090 PRINT #0, "ATTACK "
16100 PRINT #0, "WHICH WEAPON "
16110 LET keyPress = CODE(INKEY$(-1))
16120 SELect ON keyPress
16130 =82 : REMark "R"
16140   PRINT #0, "RAPIER"
16150   IF pw(1)=0 THEN 
16160     PRINT #0, "NOT OWNED"
16170   ELSE IF pt$="M" THEN 
16180     PRINT #0, "MAGES CAN'T USE RAPIERS!"
16190   ELSE 
16200     LET weapon=1
16210   END IF 
16220 =65: REMark "A"
16230   PRINT #0, "AXE"
16240   IF pw(2)=0 THEN 
16250     PRINT #0, "NOT OWNED"
16260   ELSE 
16270     LET weapon=2
16280   END IF 
16290 =83: REMark "S"
16300   PRINT #0, "SHIELD"
16310   IF pw(3)=0 THEN 
16320     PRINT #0, "NOT OWNED"
16330   ELSE 
16340     LET weapon=3
16350   END IF 
16360 =66 : REMark "B"
16370   PRINT #0, "BOW"
16380   IF pw(4)=0 THEN 
16390     PRINT #0, "NOT OWNED"
16400   ELSE IF pt$="M" THEN 
16410     PRINT #0, "MAGES CAN'T USE BOWS!"
16420   ELSE 
16430     LET weapon=4
16440 END IF 
16450 =77 : REMark "M"
16460   PRINT #0, "MAGIC AMULET"
16470   IF pw(5)=0 THEN 
16480   PRINT #0, "NOT OWNED"
16490   ELSE 
16500     LET weapon=5
16510   END IF 
16520 = REMAINDER 
16530   PRINT #0, "HANDS"
16540   LET weapon=0
16550 END SELect 
16560 IF weapon > -1 THEN 
16570   EXIT chooseWeapon
16580 END IF 
16590 END REPeat chooseWeapon
16600 REMark If axe, check if throw or swing
16610 IF weapon=2 THEN 
16620   PRINT #0, "TO THROW OR SWING:"
16630   LET keyPress=CODE(INKEY$(-1))
16640   IF keyPress=84 THEN 
16650     LET throwWeapon=1
16660     PRINT #0, "THROW"
16665     LET pw(2)=pw(2)-1
16670   ELSE 
16680     LET throwWeapon=0
16690     PRINT #0, "SWING"
16700   END IF 
16705 END IF 
16710 REMark Try to find monster
16720 IF NOT throwWeapon THEN 
16730   monsterNumber=dng%(PX+dx, PY+dy, 1)
16740 ELSE 
16750   FOR n=1 TO 5
16760     REMark Check for out-of-bounds
16770     IF PX+dx*n < 1 OR PX+dx*n > 9 OR PY+dy*n < 1 OR PY+dy*n > 9 THEN EXIT n
16780     monsterNumber=dng%(PX+n*dx, PY+n*dy, 1)
16790     IF monsterNumber > 0 THEN EXIT n
16800   END FOR n
16810 END IF 
16820 REMark Form of attack depends on weapon
16830 SELect ON weapon
16840 = 0 TO 4: REMark Standard weapon
16850   IF monsterNumber=0 OR (c(2)-RND(25)) < (monsterNumber+dungeonLevel) THEN 
16860     PRINT #0, "YOU MISSED"
16870   ELSE 
16880     LET damage = RND(W(weapon,2))+c(1)/5
16890     PRINT #0, "HIT!!!"
16900     LET MZ%(monsterNumber,1)=MZ%(monsterNumber,1)-damage
16910     PRINT #0, m$(monsterNumber);"'S HIT POINTS="; MZ%(monsterNumber,1)
16911     IF MZ%(monsterNumber,1) < 1 THEN 
16912       PRINT #0, "THOU HAST KILLED A "; m$(monsterNumber)
16913       PRINT #0, "THOU SHALT RECEIVE ";
16914       LET reward=monsterNumber+dungeonLevel
16915       PRINT #0, reward; " PIECES OF EIGHT"
16916       LET c(5)=c(5)+reward
16917       LET dng%(ML%(monsterNumber,0),ML%(monsterNumber,1),1)=0
16918       LET MZ%(monsterNumber,0)=0
16919     END IF 
16920   END IF 
16930 = 5: REMark Magic amulet
16940   IF pt$="F" THEN 
16950     LET amuletFunction=RND(3)+1
16960   ELSE 
16970     PRINT #0, "1-LADDER-UP","2-LADDER-DN": PRINT #0, "3-KILL","4-BAD??"
16980     PRINT #0, "CHOICE ";
16990     LET keyPress=CODE(INKEY$(-1))
17000     IF keyPress<CODE("1") OR keyPress>CODE("4") THEN GO TO 16980
17010     LET amuletFunction=keyPress-CODE("1")+1
17020     PRINT #0, amuletFunction
17030   END IF 
17040   IF  RND > .75 THEN 
17050     PRINT #0; "LAST CHARGE ON THIS AMULET!"
17060     LET pw(5)=pw(5)-1
17070     PAUSE 50
17075   END IF 
17080   SELect ON amuletFunction
17090   = 1: REMark Ladder up
17100     PRINT #0, "LADDER UP"
17105     LET dungeonLevel=dungeonLevel-1
17110   = 2: REMark Ladder down
17120     PRINT #0, "LADDER DOWN"
17125     LET dungeonLevel=dungeonLevel+1
17130   = 3: REMark Magic attack
17140     PRINT #0, "MAGIC ATTACK"
17150     LET MZ%(monsterNumber,1)=MZ%(monsterNumber,1)-(10+dungeonLevel)
17160   = 4: REMark Bad
17170     LET badEffect=1+RND(2)
17180     SELect ON badEffect
17190     = 1:
17200       PRINT #0, "YOU HAVE BEEN TURNED": PRINT #0, "INTO A TOAD!"
17210       FOR n=0 TO 4: LET c(n)=3: END FOR n
17220     = 2:
17230       PRINT #0, "YOU HAVE BEEN TURNED": PRINT #0, "INTO A LIZARD MAN"
17240       FOR n=0 TO 4: LET c(n)=INT(c(n)*2.5): END FOR n
17250     = 3:
17260       PRINT #0, "BACKFIRE"
17270       LET c(0) = c(0)/2
17280     END SELect 
17290   END SELect 
17300 END SELect 
17990 END DEFine attackMonster
20000 REMark Print number, fixed-width, right-justified
20005 DEFine PROCedure printNum(value, length, channel)
20010 LOCal v$, n
20020 LET v$=INT (value)
20030 IF LEN(v$)>length THEN 
20040 FOR n=1 TO length: LET v$=v$+"*": END FOR n
20045 ELSE 
20050 REPeat pSLoop: IF LEN(v$)=length: EXIT pSLoop: END IF : v$=" "&v$: END REPeat pSLoop
20060 END IF 
20070 PRINT #channel, v$;
20080 END DEFine printNum
20100 DEFine FuNction sgn(x): RETurn (x>0)-(x<0): END DEFine 
30000 REMark TESTS
30100 REMark Check Overland Map
30110 DEFine PROCedure printMap(te%, tx, ty)
30120 LOCal m, n
30130 AT 0,0
30140 FOR n=0 TO 20
30150 FOR m=0 TO 20
30160 LET zz=te%(m,20-n)
30170 IF zz THEN PRINT zz;: ELSE PRINT " ";: END IF 
30180 END FOR m
30190 PRINT
30200 END FOR n
30210 INK 6: AT 20-ty,tx: PRINT "*": INK 7
30220 PAUSE -1
30230 RETurn 
30300 REMark Check Dungeon Map
30310 DEFine PROCedure printDungeonMap(dng%, PX, PY)
30320 LOCal m, n
30330 AT 0,0
30340 FOR m=0 TO 10
30350 FOR n=0 TO 10
30360 LET zz=dng%(m,n,1)
30370 IF zz THEN PRINT zz;: ELSE PRINT ".";: END IF 
30380 END FOR n
30390 PRINT
30400 END FOR m
30410 PAUSE -1
30430 RETurn 
30500 REMark Reset default screen layout (for TV mode)
30510 WINDOW #0, 448, 40, 32, 216
30520 PAPER #0, 0: INK #0, 7: BORDER #0
30530 OPEN #1, CON_448x200a32x16_128
30540 PAPER #1, 2: INK #1,7: BORDER #1: CLS #1
30550 OPEN #2, CON_448x200a32x16_128
30560 PAPER #2, 1: INK #2,7: BORDER #2: CLS #2
30570 MODE 8
30580 STOP
